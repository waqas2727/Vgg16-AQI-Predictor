# -*- coding: utf-8 -*-
"""AQI Predictor VGG16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16IEYM3diHcxJusQnK2XwbnW1ZoMlfOLT
"""

from google.colab import drive
drive.mount('/content/drive')

import matplotlib
matplotlib.use("Agg")

# import the necessary packages
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam
from keras.preprocessing.image import img_to_array
import sys
sys.path.insert(0,'/content/drive/My Drive/pyimagesearch')
from smallervggnet import SmallerVGGNet
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from imutils import paths
import numpy as np
import argparse
import random
import pickle
import cv2
import os

dataset_train='/content/drive/My Drive/DatasetByCategories'
plot = '/content/drive/My Drive/Research Paper Images'

EPOCHS = 75
INIT_LR = 1e-3
BS = 32
IMAGE_DIMS = (96, 96, 3)
print("[INFO] loading Train images...")
imagePaths_train = sorted(list(paths.list_images(dataset_train)))
#random.seed(42)
#random.shuffle(imagePaths_train)
 
# initialize the data and labels for train and test
data_train = []
labels_train = []


# loop over the input images
for imagePath in imagePaths_train:
	# load the image, pre-process it, and store it in the data list
	image = cv2.imread(imagePath)
	image = cv2.resize(image, (IMAGE_DIMS[1], IMAGE_DIMS[0]))
	image = img_to_array(image)
	data_train.append(image)
  
	# extract set of class labels from the image path and update the
	# labels list
	l = label = imagePath.split(os.path.sep)[-2].split("_")
	labels_train.append(l)

import numpy as np
data_train = np.array(data_train, dtype="float") / 255.0
labels_train = np.array(labels_train)

print("[INFO] data matrix: {} Training images ({:.2f}MB)".format(
	len(imagePaths_train), data_train.nbytes / (1024 * 1000.0)))

# binarize the labels using scikit-learn's special multi-label
# binarizer implementation
print("[INFO] class labels:")
mlb = MultiLabelBinarizer()
labels_train = mlb.fit_transform(labels_train)

# loop over each of the possible class labels and show them
for (i, label) in enumerate(mlb.classes_):
	print("{}. {}".format(i , label))

(trainX, testX, trainY, testY) = train_test_split(data_train,
	labels_train, test_size=0.1, random_state=42)

from keras.optimizers import SGD
# load the model
#inputss = Input(shape=(96,96,3),name = 'image_input')
#model = NASNetLarge()
print("[INFO] compiling model...")
# initialize the optimizer
IMAGE_DIMS = (96, 96, 3)
model = SmallerVGGNet.build(
 	width=IMAGE_DIMS[1], height=IMAGE_DIMS[0],
 	depth=IMAGE_DIMS[2], classes=3,
 	finalAct="softmax")

# initialize the optimizer
# opt = Adam(lr=INIT_LR, decay=INIT_LR / EPOCHS)
opt = SGD(lr=0.01, momentum=0.9,decay=0.1)	
 
model.compile(loss="categorical_crossentropy", optimizer=opt,
metrics=["accuracy"])
#model.save("Original_Data.h5")
# train the network
print("[INFO] training network...")
#print(model.summary())
H=model.fit(trainX, trainY, validation_data=(testX, testY) , batch_size=32, epochs=75)

### First run the code of freeze graph...
model.save("modelVGG16.h5")
model.save_weights("modelweights_VGG16.h5")

score,acc = model.evaluate(testX, testY,batch_size=32,verbose=1)
print('Test Accuracy:', acc)
print('Test Score:', score)

#plot = "/content/drive/My Drive/RealImageByCategoriesModel/vgg16_keras_application/vgg16_keras_application"
# plot the training loss and accuracy
plt.style.use("ggplot")
plt.figure()
N = 75
plt.plot(np.arange(0, N), H.history["loss"], label="train_loss")
plt.plot(np.arange(0, N), H.history["val_loss"], label="val_loss")
plt.plot(np.arange(0, N), H.history["acc"], label="train_acc")
plt.plot(np.arange(0, N), H.history["val_acc"], label="val_acc")
plt.title("Training Loss and Accuracy")
plt.xlabel("Epoch #")
plt.ylabel("Loss/Accuracy")
plt.legend(loc="best")
plt.show()
plt.savefig(plot)